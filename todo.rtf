{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 TODOS:\
======\
\
Repository View\
---------------\
\
* Sort the contens of the dicts, so that all repos look homogenous.\
x Use BOLD for every repo name, this will help visualizing where a repo starts and ends.\
- Use softer gray for the REPOSITORIES root.\
* Add Drag & Drop for adding, deleting and changing repos place.\
- Do not allow to add a repo that is already added.\
* Change name for the repos adn groups.\
* After adding a new repo, open the tree and put the selector on top of the added repo.\
* When starting the application, show it with the REPOSITORIES root open ( so that a list of all available repos can be seen ).\
* Show the current HEAD in a repo. I need to think how to show this in a proper way ( maybe the first entry in a repo should be \
something like: "master (HEAD )" or: HEAD: master\
* The HEAD could be presented after the repo name, also, when selecting the repo, we could make the\
head revision as the actual one in browse, history, etc windows:\
  Ex. gitfend-> master\
  gitfend @ master\
\
- Superimpose an icon on the branch that is actually mapped to the HEAD.\
- Make the view as the email application.\
\
* Add grouping support ( as in Xcode, where you can create folders and subfolders and \
move repositories inside them ).\
\
- Submodules support!\
\
- When the repo name is selected, show the working dir files, marking the files that are tracked, and the ones\
that are not. In this view, it will be possible to add and remove files. As a subcase of add, it will be possible to\
stage already added files, using partial or full file commits.\
\
- Disable context menu options that are not possible depending on the selected row in the outline view.\
\
- undo/redo support for adding/removing/moving elements.\
- Change the add Group and Add repository to the + symbol, ( from the * button ).\
\
- Create new repository.\
\
Branch Management\
-----------------\
\
- Mark somehow the current branch in every repository, maybe with some different color, or using bold ( read current branch from HEAD ).\
\
- Add support for creating and deleting branches. When deleting a branch, check if the branch has data not yet merged into some other\
branch, if that is the case, give an Extra Warning that the branch has not yet been merged, are you sure you want to delete?\
\
- The branch button will show which branches have been merged into the marked branch, and in which branches the marked one has been merged into, if any!.\
\
- Switch branch -> checkout branch, but check if there are uncommited changes in current branch, and if there are propose to stash the changes.\
\
- List branches sorted by name ( in the repository browser ).\
\
\
Stash Support\
-------------\
\
- Create Stash.\
- Pop Stash\
- List Stashes: Not needed since we can see them in the repository under "Stash".\
- It should be possible to Apply a given stash.\
\
- Create Branch from stash.\
- Browsing into a stash.\
\
{\field{\*\fldinst{HYPERLINK "http://progit.org/book/ch6-3.html"}}{\fldrslt http://progit.org/book/ch6-3.html}}\
\
Staging\
-------\
\
- Stage patches\
- Stage whole files.\
\
Repository Configuration\
------------------------\
\
- Add a contextual menu in the repository view, and place a repository configuration:\
	- Manage git Config file.\
	\
- Contextual menu for creating tags from a given branch.\
\
Searching Capabilities:\
-----------------------\
- Search in history.\
- Search commit in a packfile, by author, by Commiter, by Message ( usefull to find orfan commits ).\
- Search for orfan git objects ( finds trees, commits, blobs that are orfan ).\
- Context Menu on search result page, to for example delete an object, or find branch where the object belongs, etc.\
\
\
Diff/Merge View:\
----------------\
- Allow comparing two arbitrary revisions, even support comparing revisions from different repositories.\
\
\
Twitter/Facebook/Github/Gitourious other social media support\
-------------------------------------------------------------\
\
- Make possible announce new releases ( for example, new TAG creation ) in social tools.\
- Maybe apple script based, so that it can be written as plugins!\
\
\
Bug/Feature system integration\
------------------------------\
\
- Mantis, Bugzilla, Jira, Trac, etc.\
- Maybe apple script based, so that it can be written as plugins!\
\
\
File Status View:\
-----------------\
\
This view in the central view for a standard workflow. All the files in the working dir\
are shown. The status for every file is presented. \
1) Initially no files are tracked.\
2) A file can be staged.\
3) A file is tracked.\
\
- Show following states for every file:\
	U - untracked.\
	M - Modified.\
	MA - Added.\
	MD - Deleted\
	S - Staged.\
	R - Renamed.\
	T - tracked.\
\
- Rename detection.\
\
- Staging support:\
	- Add new files.\
	- Remove files.\
	- Rename files.\
	- Add diff hunks.\
	- Apply patches.\
	\
- FSEvent support.\
	Detect when the working directory has been changed and update the view.\
	\
- Sorting capabilities: \
	sorting by status.\
	sorting by name ( always place directories first files after ).\
	\
- Compute the stage in an NSOperation, since it can be a time consuming operation.\
	\
	\
Staging and commiting:\
---------------------\
\
* Support for storing objects in the object store.\
* Support for creating blob objects.\
- Support for creating commit objects.\
- support for creating tree objects.\
- Create a commit object from current index ( tree + blobs + commit ).\
- Update index.\
\
Diff View:\
----------\
- Before and After view.\
- Interface similar to winmerge ( alt left, right for moving changes from one side to the other ).\
- Show metrics such as:\
	- Kb file size.\
	- Lines.\
	- SLOC ( source lines of code )\
\
\
\
\
\
\
\
}